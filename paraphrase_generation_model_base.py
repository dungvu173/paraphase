from abc import ABC, abstractmethod
import os
import copy
import numpy as np
from sklearn.utils import shuffle
import pickle
import csv
import json
from shared.nameko_util import rpc_proxy, decode_numpy_array

def get_content_manager_proxy():
    targetservice_proxy = rpc_proxy('FetchCourseContent', os.environ.get('CONNECTION_URL_OF_RABBIT_MQ_QUEUE', 'pyamqp://guest:guest@localhost'))
    proxy = targetservice_proxy.start()
    return proxy


class ParaphraseGenerationModelBase(ABC):
    """ This is the abstract base class, which all paraphrase generation models must inherit from.

    This class lists all the functions a paraphrase generation model must expose.
    To generate paraphrase there is one main function, which condition on utterance or input sentence:
        1) the function 'generate_paraphrases' for generating paraphrases given a input sentence,

    In addition, the abstract base class also provides internal functions for evaluating model, preprocessing utterances
    etc.
    """

    @abstractmethod
    def __init__(self, logging, config_path='./config_dev.json'):
        """
        Initializes and configures the paraphrase generation model.

        :param logging: for writing logs (logging object)
        :param config_path: path of config file (String)
        """

        super().__init__()

        self._logging = logging

        with open(config_path) as f:
            self._config = json.load(f)

        self._config_path = config_path


    @abstractmethod
    def generate_paraphrases(self, sentence, max_number_of_paraphrases=1):
        """
        When called by the paraphrase generation model (i.e. the ParaphraseGenerationModel class object), this function
        generates paraphrases using the implementation of the current model for the given sentence.
        :param sentence: sentence for which paraphrases needs to be generated(String)
        :param max_number_of_paraphrases: maximum number of paraphrases of sentence required (Integer)
        :returns: list of paraphrase sentences generated by current model (List of String)
        """

        pass

    def _generate_paraphrases_for_list_of_string(self, list_of_str=[], record_generated_paraphrases=True,
                                                 list_of_sentences_which_should_not_be_included=[],
                                                 max_number_of_paraphrases=0, name_of_paraphrases_examples_file=""):
        """
        This function will generated paraphrases for list of str given.
        :param list_of_str: list of string (list of String)
        :param record_generated_paraphrases: If true, it will write the input sentence and its generated paraphrases in
        tsv file. (Bool)
        :param list_of_sentences_which_should_not_be_included: This sentences in this list will not be included as paraphrase (list of string)
        :param max_number_of_paraphrases: maximum number of paraphrases needs to be generated. (Integer)
        :param name_of_paraphrases_examples_file: file name where all the generated paraphrases will be saved (String)
        :return: list of paraphrases (list of String)
        """
        list_of_generated_paraphrases = []

        all_sentences = []
        all_generated_paraphrases = []

        for sample in list_of_str:
            generated_paraphrases = self.generate_paraphrases(sample,
                                                              max_number_of_paraphrases=max_number_of_paraphrases)
            if not len(generated_paraphrases) == 0:
                generated_paraphrases_lower_case = [str(para).lower() for para in generated_paraphrases]
                for sentence_not_include in list_of_sentences_which_should_not_be_included:
                    if str(sentence_not_include).lower() in generated_paraphrases_lower_case:
                        generated_paraphrases_lower_case.remove(str(sentence_not_include).lower())
                all_sentences.append(sample)
                all_generated_paraphrases.append(generated_paraphrases)
                generated_paraphrases_after_removing_duplicates = self._remove_duplicates_from_list_case_insensitive(
                    generated_paraphrases_lower_case)
                list_of_generated_paraphrases.extend(generated_paraphrases_after_removing_duplicates)

        if record_generated_paraphrases and not name_of_paraphrases_examples_file =='':
            with open(name_of_paraphrases_examples_file, 'a') as f:
                writer = csv.writer(f, delimiter='\t')
                for sen, gen_par in zip(all_sentences, all_generated_paraphrases):
                    writer.writerow([sen, gen_par])

        return list_of_generated_paraphrases

    def _remove_duplicates_from_list_case_insensitive(self, list_of_sentences):
        """
        This function can be used to remove duplicated from the list of string. This checks for
        case insensitive string in a list.
        :param list_of_sentences: list of string (List of string)
        :return: list of string without duplicated(List of string)
        """

        if not isinstance(list_of_sentences, list):
            raise ValueError('Error: list_of_sentences must be of list type')

        sorted_list_of_str = list(set(sentence.lower() for sentence in list_of_sentences))
        sorted_list_of_str.sort()
        return sorted_list_of_str